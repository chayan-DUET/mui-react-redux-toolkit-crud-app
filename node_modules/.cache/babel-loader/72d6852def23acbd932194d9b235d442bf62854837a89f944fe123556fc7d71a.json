{"ast":null,"code":"import Mock from \"../mock\";\n\n// const JWT_SECRET = 'jwt_secret_key';\n// const JWT_VALIDITY = '7 days';\n\nconst userList = [{\n  id: 1,\n  role: \"SA\",\n  name: \"Jason Alexander\",\n  username: \"jason_alexander\",\n  email: \"jason@ui-lib.com\",\n  avatar: \"/assets/images/face-6.jpg\",\n  age: 25\n}];\n\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost(\"/api/auth/login\").reply(async config => {\n  try {\n    const {\n      email\n    } = JSON.parse(config.data);\n    const user = userList.find(u => u.email === email);\n    if (!user) return [400, {\n      message: \"Invalid email or password\"\n    }];\n    const payload = {\n      user: userList[0]\n    };\n    return [200, payload];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onPost(\"/api/auth/register\").reply(config => {\n  try {\n    const {\n      email,\n      username\n    } = JSON.parse(config.data);\n    const user = userList.find(u => u.email === email);\n    if (user) return [400, {\n      message: \"User already exists!\"\n    }];\n    const newUser = {\n      id: 2,\n      role: \"GUEST\",\n      name: \"Unknown\",\n      age: 25,\n      email: email,\n      username: username,\n      avatar: \"/assets/images/face-6.jpg\"\n    };\n    userList.push(newUser);\n    const payload = {\n      user: {\n        ...newUser\n      }\n    };\n    return [200, payload];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});\nMock.onGet(\"/api/auth/profile\").reply(config => {\n  try {\n    // const { Authorization } = config.headers;\n    // if (!Authorization) {\n    //   return [401, { message: 'Invalid Authorization token' }];\n    // }\n\n    // const accessToken = Authorization.split(' ')[1];\n    // const { userId } = jwt.verify(accessToken, JWT_SECRET);\n    // const user = userList.find((u) => u.id === userId);\n\n    // if (!user) {\n    //   return [401, { message: 'Invalid authorization token' }];\n    // }\n\n    const payload = {\n      user: userList[0]\n    };\n    return [200, payload];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: \"Internal server error\"\n    }];\n  }\n});","map":{"version":3,"names":["Mock","userList","id","role","name","username","email","avatar","age","onPost","reply","config","JSON","parse","data","user","find","u","message","payload","err","console","error","newUser","push","onGet"],"sources":["E:/react/mui-react-redux-toolkit-crud/src/fake-db/db/auth.js"],"sourcesContent":["import Mock from \"../mock\";\r\n\r\n// const JWT_SECRET = 'jwt_secret_key';\r\n// const JWT_VALIDITY = '7 days';\r\n\r\nconst userList = [\r\n  {\r\n    id: 1,\r\n    role: \"SA\",\r\n    name: \"Jason Alexander\",\r\n    username: \"jason_alexander\",\r\n    email: \"jason@ui-lib.com\",\r\n    avatar: \"/assets/images/face-6.jpg\",\r\n    age: 25\r\n  }\r\n];\r\n\r\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\r\n// YOU NEED TO BUILD YOUR OWN SERVER\r\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\r\n// CONTACT US AT support@ui-lib.com\r\n\r\nMock.onPost(\"/api/auth/login\").reply(async (config) => {\r\n  try {\r\n    const { email } = JSON.parse(config.data);\r\n    const user = userList.find((u) => u.email === email);\r\n\r\n    if (!user) return [400, { message: \"Invalid email or password\" }];\r\n\r\n    const payload = { user: userList[0] };\r\n    return [200, payload];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: \"Internal server error\" }];\r\n  }\r\n});\r\n\r\nMock.onPost(\"/api/auth/register\").reply((config) => {\r\n  try {\r\n    const { email, username } = JSON.parse(config.data);\r\n    const user = userList.find((u) => u.email === email);\r\n\r\n    if (user) return [400, { message: \"User already exists!\" }];\r\n\r\n    const newUser = {\r\n      id: 2,\r\n      role: \"GUEST\",\r\n      name: \"Unknown\",\r\n      age: 25,\r\n      email: email,\r\n      username: username,\r\n      avatar: \"/assets/images/face-6.jpg\"\r\n    };\r\n\r\n    userList.push(newUser);\r\n\r\n    const payload = { user: { ...newUser } };\r\n    return [200, payload];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: \"Internal server error\" }];\r\n  }\r\n});\r\n\r\nMock.onGet(\"/api/auth/profile\").reply((config) => {\r\n  try {\r\n    // const { Authorization } = config.headers;\r\n    // if (!Authorization) {\r\n    //   return [401, { message: 'Invalid Authorization token' }];\r\n    // }\r\n\r\n    // const accessToken = Authorization.split(' ')[1];\r\n    // const { userId } = jwt.verify(accessToken, JWT_SECRET);\r\n    // const user = userList.find((u) => u.id === userId);\r\n\r\n    // if (!user) {\r\n    //   return [401, { message: 'Invalid authorization token' }];\r\n    // }\r\n\r\n    const payload = { user: userList[0] };\r\n    return [200, payload];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: \"Internal server error\" }];\r\n  }\r\n});\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;;AAE1B;AACA;;AAEA,MAAMC,QAAQ,GAAG,CACf;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAE,iBAAiB;EAC3BC,KAAK,EAAE,kBAAkB;EACzBC,MAAM,EAAE,2BAA2B;EACnCC,GAAG,EAAE;AACP,CAAC,CACF;;AAED;AACA;AACA;AACA;;AAEAR,IAAI,CAACS,MAAM,CAAC,iBAAiB,CAAC,CAACC,KAAK,CAAC,MAAOC,MAAM,IAAK;EACrD,IAAI;IACF,MAAM;MAAEL;IAAM,CAAC,GAAGM,IAAI,CAACC,KAAK,CAACF,MAAM,CAACG,IAAI,CAAC;IACzC,MAAMC,IAAI,GAAGd,QAAQ,CAACe,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACX,KAAK,KAAKA,KAAK,CAAC;IAEpD,IAAI,CAACS,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;MAAEG,OAAO,EAAE;IAA4B,CAAC,CAAC;IAEjE,MAAMC,OAAO,GAAG;MAAEJ,IAAI,EAAEd,QAAQ,CAAC,CAAC;IAAE,CAAC;IACrC,OAAO,CAAC,GAAG,EAAEkB,OAAO,CAAC;EACvB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,CAAC,GAAG,EAAE;MAAEF,OAAO,EAAE;IAAwB,CAAC,CAAC;EACpD;AACF,CAAC,CAAC;AAEFlB,IAAI,CAACS,MAAM,CAAC,oBAAoB,CAAC,CAACC,KAAK,CAAEC,MAAM,IAAK;EAClD,IAAI;IACF,MAAM;MAAEL,KAAK;MAAED;IAAS,CAAC,GAAGO,IAAI,CAACC,KAAK,CAACF,MAAM,CAACG,IAAI,CAAC;IACnD,MAAMC,IAAI,GAAGd,QAAQ,CAACe,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACX,KAAK,KAAKA,KAAK,CAAC;IAEpD,IAAIS,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE;MAAEG,OAAO,EAAE;IAAuB,CAAC,CAAC;IAE3D,MAAMK,OAAO,GAAG;MACdrB,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE,SAAS;MACfI,GAAG,EAAE,EAAE;MACPF,KAAK,EAAEA,KAAK;MACZD,QAAQ,EAAEA,QAAQ;MAClBE,MAAM,EAAE;IACV,CAAC;IAEDN,QAAQ,CAACuB,IAAI,CAACD,OAAO,CAAC;IAEtB,MAAMJ,OAAO,GAAG;MAAEJ,IAAI,EAAE;QAAE,GAAGQ;MAAQ;IAAE,CAAC;IACxC,OAAO,CAAC,GAAG,EAAEJ,OAAO,CAAC;EACvB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,CAAC,GAAG,EAAE;MAAEF,OAAO,EAAE;IAAwB,CAAC,CAAC;EACpD;AACF,CAAC,CAAC;AAEFlB,IAAI,CAACyB,KAAK,CAAC,mBAAmB,CAAC,CAACf,KAAK,CAAEC,MAAM,IAAK;EAChD,IAAI;IACF;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA,MAAMQ,OAAO,GAAG;MAAEJ,IAAI,EAAEd,QAAQ,CAAC,CAAC;IAAE,CAAC;IACrC,OAAO,CAAC,GAAG,EAAEkB,OAAO,CAAC;EACvB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,CAAC,GAAG,EAAE;MAAEF,OAAO,EAAE;IAAwB,CAAC,CAAC;EACpD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}