{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\mui-react-redux-toolkit-crud\\\\src\\\\app\\\\views\\\\material-kit\\\\auto-complete\\\\AutocompleteCombo.jsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useState } from \"react\";\nimport { Autocomplete, styled, TextField } from \"@mui/material\";\nimport { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoComplete = styled(Autocomplete)(() => ({\n  width: 300,\n  marginBottom: \"16px\"\n}));\n_c = AutoComplete;\nconst suggestions = [{\n  label: \"Afghanistan\"\n}, {\n  label: \"Aland Islands\"\n}, {\n  label: \"Albania\"\n}, {\n  label: \"Algeria\"\n}, {\n  label: \"American Samoa\"\n}, {\n  label: \"Andorra\"\n}, {\n  label: \"Angola\"\n}, {\n  label: \"Anguilla\"\n}, {\n  label: \"Antarctica\"\n}, {\n  label: \"Antigua and Barbuda\"\n}, {\n  label: \"Argentina\"\n}, {\n  label: \"Armenia\"\n}, {\n  label: \"Aruba\"\n}, {\n  label: \"Australia\"\n}, {\n  label: \"Austria\"\n}, {\n  label: \"Azerbaijan\"\n}, {\n  label: \"Bahamas\"\n}, {\n  label: \"Bahrain\"\n}, {\n  label: \"Bangladesh\"\n}, {\n  label: \"Barbados\"\n}, {\n  label: \"Belarus\"\n}, {\n  label: \"Belgium\"\n}, {\n  label: \"Belize\"\n}, {\n  label: \"Benin\"\n}, {\n  label: \"Bermuda\"\n}, {\n  label: \"Bhutan\"\n}, {\n  label: \"Bolivia, Plurinational State of\"\n}, {\n  label: \"Bonaire, Sint Eustatius and Saba\"\n}, {\n  label: \"Bosnia and Herzegovina\"\n}, {\n  label: \"Botswana\"\n}, {\n  label: \"Bouvet Island\"\n}, {\n  label: \"Brazil\"\n}, {\n  label: \"British Indian Ocean Territory\"\n}, {\n  label: \"Brunei Darussalam\"\n}];\nconst filter = createFilterOptions();\nexport default function AutocompleteCombo() {\n  _s();\n  const [value, setValue] = useState(null);\n  const handleChange = (_, newValue) => {\n    if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n      return;\n    }\n    setValue(newValue);\n  };\n  const filterOptions = (options, params) => {\n    const filtered = filter(options, params);\n    if (params.inputValue !== \"\") {\n      filtered.push({\n        inputValue: params.inputValue,\n        label: `Add \"${params.inputValue}\"`\n      });\n    }\n    return filtered;\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: suggestions,\n      getOptionLabel: option => option.label,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Combo box\",\n        variant: \"outlined\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n      value: value,\n      options: suggestions,\n      onChange: handleChange,\n      filterOptions: filterOptions,\n      getOptionLabel: option => {\n        // e.g value selected with enter, right from the input\n        if (typeof option === \"string\") return option;\n        if (option.inputValue) return option.inputValue;\n        return option.label;\n      },\n      renderOption: option => option.label,\n      style: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Free solo with text demo\",\n        variant: \"outlined\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: suggestions,\n      getOptionLabel: option => option.label,\n      getOptionDisabled: option => option === suggestions[0] || option === suggestions[2],\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n        ...params,\n        label: \"Disabled option\",\n        variant: \"outlined\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(AutocompleteCombo, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n_c2 = AutocompleteCombo;\nvar _c, _c2;\n$RefreshReg$(_c, \"AutoComplete\");\n$RefreshReg$(_c2, \"AutocompleteCombo\");","map":{"version":3,"names":["Fragment","useState","Autocomplete","styled","TextField","createFilterOptions","jsxDEV","_jsxDEV","AutoComplete","width","marginBottom","_c","suggestions","label","filter","AutocompleteCombo","_s","value","setValue","handleChange","_","newValue","inputValue","filterOptions","options","params","filtered","push","children","getOptionLabel","option","renderInput","variant","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","onChange","renderOption","style","freeSolo","getOptionDisabled","_c2","$RefreshReg$"],"sources":["E:/react/mui-react-redux-toolkit-crud/src/app/views/material-kit/auto-complete/AutocompleteCombo.jsx"],"sourcesContent":["import { Fragment, useState } from \"react\";\nimport { Autocomplete, styled, TextField } from \"@mui/material\";\nimport { createFilterOptions } from \"@mui/material/Autocomplete\";\n\nconst AutoComplete = styled(Autocomplete)(() => ({ width: 300, marginBottom: \"16px\" }));\n\nconst suggestions = [\n  { label: \"Afghanistan\" },\n  { label: \"Aland Islands\" },\n  { label: \"Albania\" },\n  { label: \"Algeria\" },\n  { label: \"American Samoa\" },\n  { label: \"Andorra\" },\n  { label: \"Angola\" },\n  { label: \"Anguilla\" },\n  { label: \"Antarctica\" },\n  { label: \"Antigua and Barbuda\" },\n  { label: \"Argentina\" },\n  { label: \"Armenia\" },\n  { label: \"Aruba\" },\n  { label: \"Australia\" },\n  { label: \"Austria\" },\n  { label: \"Azerbaijan\" },\n  { label: \"Bahamas\" },\n  { label: \"Bahrain\" },\n  { label: \"Bangladesh\" },\n  { label: \"Barbados\" },\n  { label: \"Belarus\" },\n  { label: \"Belgium\" },\n  { label: \"Belize\" },\n  { label: \"Benin\" },\n  { label: \"Bermuda\" },\n  { label: \"Bhutan\" },\n  { label: \"Bolivia, Plurinational State of\" },\n  { label: \"Bonaire, Sint Eustatius and Saba\" },\n  { label: \"Bosnia and Herzegovina\" },\n  { label: \"Botswana\" },\n  { label: \"Bouvet Island\" },\n  { label: \"Brazil\" },\n  { label: \"British Indian Ocean Territory\" },\n  { label: \"Brunei Darussalam\" }\n];\n\nconst filter = createFilterOptions();\n\nexport default function AutocompleteCombo() {\n  const [value, setValue] = useState(null);\n\n  const handleChange = (_, newValue) => {\n    if (newValue && newValue.inputValue) {\n      setValue({ label: newValue.inputValue });\n      return;\n    }\n    setValue(newValue);\n  };\n\n  const filterOptions = (options, params) => {\n    const filtered = filter(options, params);\n    if (params.inputValue !== \"\") {\n      filtered.push({ inputValue: params.inputValue, label: `Add \"${params.inputValue}\"` });\n    }\n    return filtered;\n  };\n\n  return (\n    <Fragment>\n      <AutoComplete\n        options={suggestions}\n        getOptionLabel={(option) => option.label}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Combo box\" variant=\"outlined\" fullWidth />\n        )}\n      />\n\n      <AutoComplete\n        value={value}\n        options={suggestions}\n        onChange={handleChange}\n        filterOptions={filterOptions}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === \"string\") return option;\n          if (option.inputValue) return option.inputValue;\n          return option.label;\n        }}\n        renderOption={(option) => option.label}\n        style={{ width: 300 }}\n        freeSolo\n        renderInput={(params) => (\n          <TextField {...params} label=\"Free solo with text demo\" variant=\"outlined\" fullWidth />\n        )}\n      />\n\n      <AutoComplete\n        options={suggestions}\n        getOptionLabel={(option) => option.label}\n        getOptionDisabled={(option) => option === suggestions[0] || option === suggestions[2]}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Disabled option\" variant=\"outlined\" fullWidth />\n        )}\n      />\n    </Fragment>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}