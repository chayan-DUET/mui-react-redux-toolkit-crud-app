{"ast":null,"code":"import Mock from \"../mock\";\nimport shortId from \"shortid\";\nconst NotificationDB = {\n  list: [{\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570702802573,\n    title: \"New message from Devid\",\n    subtitle: \"Hello, Any progress...\",\n    path: \"chat\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Alert\",\n    icon: {\n      name: \"notifications\",\n      color: \"error\"\n    },\n    timestamp: 1570702702573,\n    title: \"Server overloaded\",\n    subtitle: \"Traffice reached 2M\",\n    path: \"page-layouts/user-profile\"\n  }, {\n    id: shortId.generate(),\n    heading: \"Message\",\n    icon: {\n      name: \"chat\",\n      color: \"primary\"\n    },\n    timestamp: 1570502502573,\n    title: \"New message from Goustove\",\n    subtitle: \"Hello, send me details\",\n    path: \"chat\"\n  }]\n};\nMock.onGet(\"/api/notification\").reply(() => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(\"/api/notification/add\").reply(() => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\nMock.onPost(\"/api/notification/delete\").reply(config => {\n  let {\n    id\n  } = JSON.parse(config.data);\n  console.log(config.data);\n  const response = NotificationDB.list.filter(notification => notification.id !== id);\n  NotificationDB.list = [...response];\n  return [200, response];\n});\nMock.onPost(\"/api/notification/delete-all\").reply(() => {\n  NotificationDB.list = [];\n  const response = NotificationDB.list;\n  return [200, response];\n});","map":{"version":3,"names":["Mock","shortId","NotificationDB","list","id","generate","heading","icon","name","color","timestamp","title","subtitle","path","onGet","reply","response","onPost","config","JSON","parse","data","console","log","filter","notification"],"sources":["E:/react/mui-react-redux-toolkit-crud/src/fake-db/db/notification.js"],"sourcesContent":["import Mock from \"../mock\";\nimport shortId from \"shortid\";\n\nconst NotificationDB = {\n  list: [\n    {\n      id: shortId.generate(),\n      heading: \"Message\",\n      icon: { name: \"chat\", color: \"primary\" },\n      timestamp: 1570702802573,\n      title: \"New message from Devid\",\n      subtitle: \"Hello, Any progress...\",\n      path: \"chat\"\n    },\n    {\n      id: shortId.generate(),\n      heading: \"Alert\",\n      icon: { name: \"notifications\", color: \"error\" },\n      timestamp: 1570702702573,\n      title: \"Server overloaded\",\n      subtitle: \"Traffice reached 2M\",\n      path: \"page-layouts/user-profile\"\n    },\n    {\n      id: shortId.generate(),\n      heading: \"Message\",\n      icon: { name: \"chat\", color: \"primary\" },\n      timestamp: 1570502502573,\n      title: \"New message from Goustove\",\n      subtitle: \"Hello, send me details\",\n      path: \"chat\"\n    }\n  ]\n};\n\nMock.onGet(\"/api/notification\").reply(() => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\n\nMock.onPost(\"/api/notification/add\").reply(() => {\n  const response = NotificationDB.list;\n  return [200, response];\n});\n\nMock.onPost(\"/api/notification/delete\").reply((config) => {\n  let { id } = JSON.parse(config.data);\n  console.log(config.data);\n\n  const response = NotificationDB.list.filter((notification) => notification.id !== id);\n  NotificationDB.list = [...response];\n  return [200, response];\n});\n\nMock.onPost(\"/api/notification/delete-all\").reply(() => {\n  NotificationDB.list = [];\n  const response = NotificationDB.list;\n  return [200, response];\n});\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,OAAOC,OAAO,MAAM,SAAS;AAE7B,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,CACJ;IACEC,EAAE,EAAEH,OAAO,CAACI,QAAQ,CAAC,CAAC;IACtBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAU,CAAC;IACxCC,SAAS,EAAE,aAAa;IACxBC,KAAK,EAAE,wBAAwB;IAC/BC,QAAQ,EAAE,wBAAwB;IAClCC,IAAI,EAAE;EACR,CAAC,EACD;IACET,EAAE,EAAEH,OAAO,CAACI,QAAQ,CAAC,CAAC;IACtBC,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAE;MAAEC,IAAI,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAC/CC,SAAS,EAAE,aAAa;IACxBC,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAE,qBAAqB;IAC/BC,IAAI,EAAE;EACR,CAAC,EACD;IACET,EAAE,EAAEH,OAAO,CAACI,QAAQ,CAAC,CAAC;IACtBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAU,CAAC;IACxCC,SAAS,EAAE,aAAa;IACxBC,KAAK,EAAE,2BAA2B;IAClCC,QAAQ,EAAE,wBAAwB;IAClCC,IAAI,EAAE;EACR,CAAC;AAEL,CAAC;AAEDb,IAAI,CAACc,KAAK,CAAC,mBAAmB,CAAC,CAACC,KAAK,CAAC,MAAM;EAC1C,MAAMC,QAAQ,GAAGd,cAAc,CAACC,IAAI;EACpC,OAAO,CAAC,GAAG,EAAEa,QAAQ,CAAC;AACxB,CAAC,CAAC;AAEFhB,IAAI,CAACiB,MAAM,CAAC,uBAAuB,CAAC,CAACF,KAAK,CAAC,MAAM;EAC/C,MAAMC,QAAQ,GAAGd,cAAc,CAACC,IAAI;EACpC,OAAO,CAAC,GAAG,EAAEa,QAAQ,CAAC;AACxB,CAAC,CAAC;AAEFhB,IAAI,CAACiB,MAAM,CAAC,0BAA0B,CAAC,CAACF,KAAK,CAAEG,MAAM,IAAK;EACxD,IAAI;IAAEd;EAAG,CAAC,GAAGe,IAAI,CAACC,KAAK,CAACF,MAAM,CAACG,IAAI,CAAC;EACpCC,OAAO,CAACC,GAAG,CAACL,MAAM,CAACG,IAAI,CAAC;EAExB,MAAML,QAAQ,GAAGd,cAAc,CAACC,IAAI,CAACqB,MAAM,CAAEC,YAAY,IAAKA,YAAY,CAACrB,EAAE,KAAKA,EAAE,CAAC;EACrFF,cAAc,CAACC,IAAI,GAAG,CAAC,GAAGa,QAAQ,CAAC;EACnC,OAAO,CAAC,GAAG,EAAEA,QAAQ,CAAC;AACxB,CAAC,CAAC;AAEFhB,IAAI,CAACiB,MAAM,CAAC,8BAA8B,CAAC,CAACF,KAAK,CAAC,MAAM;EACtDb,cAAc,CAACC,IAAI,GAAG,EAAE;EACxB,MAAMa,QAAQ,GAAGd,cAAc,CAACC,IAAI;EACpC,OAAO,CAAC,GAAG,EAAEa,QAAQ,CAAC;AACxB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}